<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Expense Tracker</title>
    <style>
        :root {
            --primary-color: #6c5ce7;
            --secondary-color: #a29bfe;
            --red: #e74c3c;
            --green: #2ecc71;
            --dark: #2d3436;
            --light: #f5f6fa;
        }
        
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        
        body {
            background-color: #f8f9fa;
            color: var(--dark);
            line-height: 1.6;
        }
        
        .container {
            max-width: 1000px;
            margin: 0 auto;
            padding: 20px;
        }
        
        .app-header {
            background-color: var(--primary-color);
            color: white;
            padding: 20px;
            border-radius: 10px 10px 0 0;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        }
        
        .app-header h1 {
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        .app-header h1 svg {
            width: 28px;
            height: 28px;
        }
        
        .main-content {
            display: grid;
            grid-template-columns: 1fr 2fr;
            gap: 20px;
            margin-top: 20px;
        }
        
        @media (max-width: 768px) {
            .main-content {
                grid-template-columns: 1fr;
            }
        }
        
        .card {
            background-color: white;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            padding: 20px;
            margin-bottom: 20px;
        }
        
        .card h2 {
            color: var(--primary-color);
            margin-bottom: 15px;
            border-bottom: 2px solid #f1f2f6;
            padding-bottom: 10px;
        }
        
        /* Form styles */
        .form-group {
            margin-bottom: 15px;
        }
        
        label {
            display: block;
            margin-bottom: 5px;
            font-weight: 500;
        }
        
        input, select, textarea {
            width: 100%;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 5px;
            font-size: 16px;
        }
        
        button {
            background-color: var(--primary-color);
            color: white;
            border: none;
            padding: 10px 15px;
            border-radius: 5px;
            cursor: pointer;
            font-size: 16px;
            transition: background-color 0.3s;
        }
        
        button:hover {
            background-color: var(--secondary-color);
        }
        
        /* Balance summary */
        .balance-container {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 15px;
            margin-bottom: 20px;
        }
        
        .balance-card {
            padding: 15px;
            border-radius: 10px;
            color: white;
            text-align: center;
        }
        
        .balance-card.total {
            background-color: var(--primary-color);
        }
        
        .balance-card.income {
            background-color: var(--green);
        }
        
        .balance-card.expense {
            background-color: var(--red);
        }
        
        .balance-card h3 {
            font-size: 18px;
            margin-bottom: 10px;
        }
        
        .balance-card .amount {
            font-size: 24px;
            font-weight: bold;
        }
        
        /* Transaction list */
        .transaction-list {
            list-style: none;
            margin-top: 20px;
        }
        
        .transaction-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 12px;
            border-bottom: 1px solid #eee;
            position: relative;
        }
        
        .transaction-item:last-child {
            border-bottom: none;
        }
        
        .transaction-item .transaction-details {
            flex-grow: 1;
        }
        
        .transaction-item .transaction-category {
            font-size: 12px;
            color: #777;
            margin-top: 4px;
        }
        
        .transaction-item .transaction-date {
            font-size: 12px;
            color: #777;
            margin-top: 2px;
        }
        
        .transaction-item .transaction-amount {
            font-weight: bold;
            display: flex;
            align-items: center;
        }
        
        .income-text {
            color: var(--green);
        }
        
        .expense-text {
            color: var(--red);
        }
        
        .transaction-actions {
            display: flex;
            gap: 5px;
        }
        
        .transaction-actions button {
            padding: 5px;
            background-color: transparent;
            color: #777;
            border: none;
        }
        
        .transaction-actions button:hover {
            color: var(--primary-color);
        }
        
        /* Filter and search */
        .filter-container {
            display: flex;
            gap: 10px;
            margin-bottom: 20px;
            flex-wrap: wrap;
        }
        
        .filter-container select, .filter-container input {
            padding: 8px;
            flex-grow: 1;
        }
        
        /* Charts section */
        .chart-container {
            margin-top: 20px;
            height: 300px;
            position: relative;
        }
        
        /* Tabs */
        .tabs {
            display: flex;
            margin-bottom: 20px;
            border-bottom: 2px solid #eee;
        }
        
        .tab {
            padding: 10px 20px;
            cursor: pointer;
            border-bottom: 2px solid transparent;
            margin-bottom: -2px;
        }
        
        .tab.active {
            border-bottom: 2px solid var(--primary-color);
            color: var(--primary-color);
            font-weight: bold;
        }
        
        /* Tab content */
        .tab-content {
            display: none;
        }
        
        .tab-content.active {
            display: block;
        }
        
        /* Category list */
        .category-list {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
            gap: 10px;
            margin-top: 20px;
        }
        
        .category-item {
            background-color: #f8f9fa;
            padding: 10px;
            border-radius: 5px;
            text-align: center;
            border: 1px solid #eee;
        }
        
        .category-item .category-name {
            font-weight: bold;
            margin-bottom: 5px;
        }
        
        .category-item .category-amount {
            color: var(--primary-color);
        }
        
        /* Modal */
        .modal-backdrop {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            display: none;
            justify-content: center;
            align-items: center;
            z-index: 1000;
        }
        
        .modal {
            background-color: white;
            border-radius: 10px;
            max-width: 500px;
            width: 100%;
            padding: 20px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
        }
        
        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }
        
        .modal-header h3 {
            color: var(--primary-color);
        }
        
        .close-modal {
            background: none;
            border: none;
            font-size: 20px;
            cursor: pointer;
            color: #777;
        }
        
        /* Export/Import buttons */
        .data-actions {
            display: flex;
            gap: 10px;
            margin-top: 20px;
        }
        
        .data-actions button {
            flex: 1;
        }
        
        /* Toggle switch */
        .switch {
            position: relative;
            display: inline-block;
            width: 50px;
            height: 24px;
            margin-left: 10px;
        }
        
        .switch input {
            opacity: 0;
            width: 0;
            height: 0;
        }
        
        .slider {
            position: absolute;
            cursor: pointer;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: #ccc;
            transition: .4s;
            border-radius: 24px;
        }
        
        .slider:before {
            position: absolute;
            content: "";
            height: 16px;
            width: 16px;
            left: 4px;
            bottom: 4px;
            background-color: white;
            transition: .4s;
            border-radius: 50%;
        }
        
        input:checked + .slider {
            background-color: var(--primary-color);
        }
        
        input:checked + .slider:before {
            transform: translateX(26px);
        }
        
        .theme-toggle {
            display: flex;
            align-items: center;
            margin-left: auto;
        }
        
        /* No transactions message */
        .no-transactions {
            text-align: center;
            padding: 20px;
            color: #777;
        }
    </style>
</head>
<body>
    <div class="container">
        <header class="app-header">
            <h1>
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <rect x="2" y="5" width="20" height="14" rx="2" />
                    <line x1="2" y1="10" x2="22" y2="10" />
                </svg>
                Expense Tracker
                <div class="theme-toggle">
                    <span>Dark Mode</span>
                    <label class="switch">
                        <input type="checkbox" id="theme-toggle">
                        <span class="slider"></span>
                    </label>
                </div>
            </h1>
        </header>
        
        <div class="main-content">
            <div class="left-column">
                <div class="card">
                    <h2>Add Transaction</h2>
                    <form id="expense-form">
                        <div class="form-group">
                            <label for="transaction-name">Description</label>
                            <input type="text" id="transaction-name" placeholder="What did you spend on?" required>
                        </div>
                        
                        <div class="form-group">
                            <label for="transaction-amount">Amount</label>
                            <input type="number" id="transaction-amount" min="0" step="0.01" placeholder="0.00" required>
                        </div>
                        
                        <div class="form-group">
                            <label for="transaction-type">Type</label>
                            <select id="transaction-type" required>
                                <option value="expense">Expense</option>
                                <option value="income">Income</option>
                            </select>
                        </div>
                        
                        <div class="form-group">
                            <label for="transaction-category">Category</label>
                            <select id="transaction-category" required>
                                <option value="">Select Category</option>
                                <option value="food">Food & Dining</option>
                                <option value="transportation">Transportation</option>
                                <option value="housing">Housing & Utilities</option>
                                <option value="entertainment">Entertainment</option>
                                <option value="shopping">Shopping</option>
                                <option value="health">Health & Medical</option>
                                <option value="travel">Travel</option>
                                <option value="education">Education</option>
                                <option value="personal">Personal Care</option>
                                <option value="bills">Bills & Payments</option>
                                <option value="salary">Salary</option>
                                <option value="gifts">Gifts/Rewards</option>
                                <option value="investments">Investments</option>
                                <option value="other">Other</option>
                            </select>
                        </div>
                        
                        <div class="form-group">
                            <label for="transaction-date">Date</label>
                            <input type="date" id="transaction-date" required>
                        </div>
                        
                        <div class="form-group">
                            <label for="transaction-notes">Notes (Optional)</label>
                            <textarea id="transaction-notes" rows="3" placeholder="Add any additional details..."></textarea>
                        </div>
                        
                        <button type="submit">Add Transaction</button>
                    </form>
                </div>
                
                <div class="card">
                    <h2>Settings</h2>
                    <div class="form-group">
                        <label for="currency-select">Currency</label>
                        <select id="currency-select">
                            <option value="USD">USD ($)</option>
                            <option value="EUR">EUR (€)</option>
                            <option value="GBP">GBP (£)</option>
                            <option value="JPY">JPY (¥)</option>
                            <option value="INR">INR (₹)</option>
                            <option value="CAD">CAD ($)</option>
                            <option value="AUD">AUD ($)</option>
                        </select>
                    </div>
                    
                    <div class="data-actions">
                        <button id="export-data">Export Data</button>
                        <button id="import-data">Import Data</button>
                    </div>
                    
                    <div class="form-group" style="margin-top: 15px;">
                        <button id="clear-data" style="background-color: var(--red);">Clear All Data</button>
                    </div>
                </div>
            </div>
            
            <div class="right-column">
                <div class="balance-container">
                    <div class="balance-card total">
                        <h3>Total Balance</h3>
                        <div class="amount" id="total-balance">$0.00</div>
                    </div>
                    <div class="balance-card income">
                        <h3>Income</h3>
                        <div class="amount" id="total-income">$0.00</div>
                    </div>
                    <div class="balance-card expense">
                        <h3>Expenses</h3>
                        <div class="amount" id="total-expense">$0.00</div>
                    </div>
                </div>
                
                <div class="card">
                    <div class="tabs">
                        <div class="tab active" data-tab="transactions">Transactions</div>
                        <div class="tab" data-tab="analytics">Analytics</div>
                        <div class="tab" data-tab="budget">Budget</div>
                    </div>
                    
                    <div class="tab-content active" id="transactions-tab">
                        <div class="filter-container">
                            <input type="text" id="search-transactions" placeholder="Search transactions...">
                            <select id="filter-type">
                                <option value="all">All Types</option>
                                <option value="expense">Expenses</option>
                                <option value="income">Income</option>
                            </select>
                            <select id="filter-category">
                                <option value="all">All Categories</option>
                                <option value="food">Food & Dining</option>
                                <option value="transportation">Transportation</option>
                                <option value="housing">Housing & Utilities</option>
                                <option value="entertainment">Entertainment</option>
                                <option value="shopping">Shopping</option>
                                <option value="health">Health & Medical</option>
                                <option value="travel">Travel</option>
                                <option value="education">Education</option>
                                <option value="personal">Personal Care</option>
                                <option value="bills">Bills & Payments</option>
                                <option value="salary">Salary</option>
                                <option value="gifts">Gifts/Rewards</option>
                                <option value="investments">Investments</option>
                                <option value="other">Other</option>
                            </select>
                            <select id="filter-date">
                                <option value="all">All Time</option>
                                <option value="today">Today</option>
                                <option value="week">This Week</option>
                                <option value="month">This Month</option>
                                <option value="year">This Year</option>
                            </select>
                        </div>
                        
                        <ul class="transaction-list" id="transaction-list">
                            <!-- Transactions will be added here dynamically -->
                            <div class="no-transactions" id="no-transactions">
                                <p>No transactions found. Add a transaction to get started!</p>
                            </div>
                        </ul>
                    </div>
                    
                    <div class="tab-content" id="analytics-tab">
                        <div class="filter-container">
                            <select id="chart-type">
                                <option value="pie">Pie Chart</option>
                                <option value="bar">Bar Chart</option>
                                <option value="line">Line Chart</option>
                            </select>
                            <select id="chart-period">
                                <option value="week">This Week</option>
                                <option value="month" selected>This Month</option>
                                <option value="year">This Year</option>
                                <option value="all">All Time</option>
                            </select>
                        </div>
                        
                        <div class="chart-container">
                            <canvas id="expense-chart"></canvas>
                        </div>
                        
                        <h3 style="margin: 20px 0 10px;">Spending by Category</h3>
                        <div class="category-list" id="category-stats">
                            <!-- Category stats will be added here dynamically -->
                        </div>
                    </div>
                    
                    <div class="tab-content" id="budget-tab">
                        <div class="form-group">
                            <label for="monthly-budget">Set Monthly Budget</label>
                            <div style="display: flex; gap: 10px;">
                                <input type="number" id="monthly-budget" placeholder="Enter amount">
                                <button id="save-budget">Save</button>
                            </div>
                        </div>
                        
                        <div style="margin-top: 20px;">
                            <h3>Budget Status</h3>
                            <div style="margin-top: 10px; background-color: #f1f2f6; border-radius: 5px; height: 20px; position: relative;">
                                <div id="budget-progress" style="height: 100%; background-color: var(--primary-color); width: 0; border-radius: 5px; transition: width 0.3s;"></div>
                            </div>
                            <div style="display: flex; justify-content: space-between; margin-top: 5px;">
                                <span id="spent-amount">$0 spent</span>
                                <span id="budget-amount">Budget: $0</span>
                            </div>
                        </div>
                        
                        <h3 style="margin: 20px 0 10px;">Category Budgets</h3>
                        <div id="category-budgets">
                            <!-- Category budgets will be added here -->
                            <div style="text-align: center; padding: 20px; color: #777;">
                                <p>Set a monthly budget to enable category budgeting</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Edit Transaction Modal -->
    <div class="modal-backdrop" id="edit-modal">
        <div class="modal">
            <div class="modal-header">
                <h3>Edit Transaction</h3>
                <button class="close-modal">&times;</button>
            </div>
            <form id="edit-form">
                <input type="hidden" id="edit-id">
                <div class="form-group">
                    <label for="edit-name">Description</label>
                    <input type="text" id="edit-name" required>
                </div>
                
                <div class="form-group">
                    <label for="edit-amount">Amount</label>
                    <input type="number" id="edit-amount" min="0" step="0.01" required>
                </div>
                
                <div class="form-group">
                    <label for="edit-type">Type</label>
                    <select id="edit-type" required>
                        <option value="expense">Expense</option>
                        <option value="income">Income</option>
                    </select>
                </div>
                
                <div class="form-group">
                    <label for="edit-category">Category</label>
                    <select id="edit-category" required>
                        <option value="food">Food & Dining</option>
                        <option value="transportation">Transportation</option>
                        <option value="housing">Housing & Utilities</option>
                        <option value="entertainment">Entertainment</option>
                        <option value="shopping">Shopping</option>
                        <option value="health">Health & Medical</option>
                        <option value="travel">Travel</option>
                        <option value="education">Education</option>
                        <option value="personal">Personal Care</option>
                        <option value="bills">Bills & Payments</option>
                        <option value="salary">Salary</option>
                        <option value="gifts">Gifts/Rewards</option>
                        <option value="investments">Investments</option>
                        <option value="other">Other</option>
                    </select>
                </div>
                
                <div class="form-group">
                    <label for="edit-date">Date</label>
                    <input type="date" id="edit-date" required>
                </div>
                
                <div class="form-group">
                    <label for="edit-notes">Notes (Optional)</label>
                    <textarea id="edit-notes" rows="3"></textarea>
                </div>
                
                <button type="submit">Save Changes</button>
            </form>
        </div>
    </div>
    
    <!-- Import Modal -->
    <div class="modal-backdrop" id="import-modal">
        <div class="modal">
            <div class="modal-header">
                <h3>Import Data</h3>
                <button class="close-modal">&times;</button>
            </div>
            <div class="form-group">
                <label for="import-file">Select JSON file to import</label>
                <input type="file" id="import-file" accept=".json">
            </div>
            <div style="margin-top: 20px; color: #777;">
                <p>Warning: Importing data will replace all current data.</p>
            </div>
            <button id="confirm-import" style="margin-top: 20px;">Import Data</button>
        </div>
    </div>
    
    <!-- Delete Confirmation Modal -->
    <div class="modal-backdrop" id="delete-modal">
        <div class="modal">
            <div class="modal-header">
                <h3>Confirm Delete</h3>
                <button class="close-modal">&times;</button>
            </div>
            <p>Are you sure you want to delete this transaction? This action cannot be undone.</p>
            <div style="display: flex; gap: 10px; margin-top: 20px;">
                <button id="cancel-delete" style="background-color: #ddd; color: #333;">Cancel</button>
                <button id="confirm-delete" style="background-color: var(--red);">Delete</button>
            </div>
        </div>
    </div>
    
    <!-- Clear Data Confirmation Modal -->
    <div class="modal-backdrop" id="clear-modal">
        <div class="modal">
            <div class="modal-header">
                <h3>Clear All Data</h3>
                <button class="close-modal">&times;</button>
            </div>
            <p>Are you sure you want to clear all your expense data? This action cannot be undone.</p>
            <div style="display: flex; gap: 10px; margin-top: 20px;">
                <button id="cancel-clear" style="background-color: #ddd; color: #333;">Cancel</button>
                <button id="confirm-clear" style="background-color: var(--red);">Clear All Data</button>
            </div>
        </div>
    </div>
    
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.9.1/chart.min.js"></script>
    <script>
        // Initialize variables
        let transactions = JSON.parse(localStorage.getItem('transactions')) || [];
        let settings = JSON.parse(localStorage.getItem('settings')) || {
            currency: 'USD',
            theme: 'light',
            budget: 0
        };
        let currentTransactionIdToDelete = null;
        let chart = null;
        
        // Currency symbols
        const currencySymbols = {
            'USD': '$',
            'EUR': '€',
            'GBP': '£',
            'JPY': '¥',
            'INR': '₹',
            'CAD': '$',
            'AUD': '$'
        };
        
        // Category icons (using emojis as placeholders)
        const categoryIcons = {
            'food': '🍔',
            'transportation': '🚗',
            'housing': '🏠',
            'entertainment': '🎬',
            'shopping': '🛍️',
            'health': '💊',
            'travel': '✈️',
            'education': '📚',
            'personal': '💇',
            'bills': '📄',
            'salary': '💰',
            'gifts': '🎁',
            'investments': '📈',
            'other': '📌'
        };
        
        // Initialize the app
        document.addEventListener('DOMContentLoaded', () => {
            initApp();
            setupEventListeners();
        });
        
        function initApp() {
            // Set current date as default in the form
            document.getElementById('transaction-date').valueAsDate = new Date();
            
            // Load saved settings
            loadSettings();
            
            // Display transactions
            displayTransactions();
            
            // Update balance summary
            updateBalanceSummary();
            
            // Initialize charts
            if (document.getElementById('analytics-tab').classList.contains('active')) {
                updateCharts();
            }
            
            // Update budget display
            updateBudgetDisplay();
        }
        
        function setupEventListeners() {
            // Form submission
            document.getElementById('expense-form').addEventListener('submit', addTransaction);
            
            // Edit form submission
            document.getElementById('edit-form').addEventListener('submit', saveEditedTransaction);
            
            // Tab switching
            document.querySelectorAll('.tab').forEach(tab => {
                tab.addEventListener('click', () => {
                    document.querySelectorAll('.tab').forEach(t => t.classList.remove('active'));
                    document.querySelectorAll('.tab-content').forEach(c => c.classList.remove('active'));
                    
                    tab.classList.add('active');
                    document.getElementById(`${tab.dataset.tab}-tab`).classList.add('active');
                    
                    if (tab.dataset.tab === 'analytics') {
                        updateCharts();
                    }
                });
            });
            
            // Filter and search
            document.getElementById('search-transactions').addEventListener('input', displayTransactions);
            document.getElementById('filter-type').addEventListener('change', displayTransactions);
            document.getElementById('filter-category').addEventListener('change', displayTransactions);
            document.getElementById('filter-date').addEventListener('change', displayTransactions);
            
            // Chart controls
            document.getElementById('chart-type').addEventListener('change', updateCharts);
            document.getElementById('chart-period').addEventListener('change', updateCharts);
            
            // Currency select
            document.getElementById('currency-select').addEventListener('change', (e) => {
                settings.currency = e.target.value;
                saveSettings();
                updateBalanceSummary();
                displayTransactions();
            });
            
            // Theme toggle
            document.getElementById('theme-toggle').addEventListener('change', toggleTheme);
            
            // Export data
            document.getElementById('export-data').addEventListener('click', exportData);
            
            // Import data button
            document.getElementById('import-data').addEventListener('click', () => {
                showModal('import-modal');
            });
            
            // Confirm import
            document.getElementById('confirm-import').addEventListener('click', importData);
            
            // Clear data button
            document.getElementById('clear-data').addEventListener('click', () => {
                showModal('clear-modal');
            });
            
            // Confirm clear data
            document.getElementById('confirm-clear').addEventListener('click', clearAllData);
            document.getElementById('cancel-clear').addEventListener('click', () => {
                hideModal('clear-modal');
            });
            
            // Close modals
            document.querySelectorAll('.close-modal').forEach(btn => {
                btn.addEventListener('click', (e) => {
                    hideModal(e.target.closest('.modal-backdrop').id);
                });
            });
            
            // Save budget
            document.getElementById('save-budget').addEventListener('click', saveBudget);
            
            // Cancel delete
            document.getElementById('cancel-delete').addEventListener('click', () => {
                hideModal('delete-modal');
            });
            
            // Confirm delete
            document.getElementById('confirm-delete').addEventListener('click', deleteTransaction);
        }
        
        function addTransaction(e) {
            e.preventDefault();
            
            const name = document.getElementById('transaction-name').value;
            const amount = parseFloat(document.getElementById('transaction-amount').value);
            const type = document.getElementById('transaction-type').value;
            const category = document.getElementById('transaction-category').value;
            const date = document.getElementById('transaction-date').value;
            const notes = document.getElementById('transaction-notes').value;
            
            const newTransaction = {
                id: generateID(),
                name,
                amount,
                type,
                category,
                date,
                notes,
                created: new Date().toISOString()
            };
            
            transactions.unshift(newTransaction);
            saveTransactions();
            
            // Reset form
            document.getElementById('expense-form').reset();
            document.getElementById('transaction-date').valueAsDate = new Date();
            
            // Update UI
            displayTransactions();
            updateBalanceSummary();
            updateBudgetDisplay();
            
            // Show success message
            showNotification('Transaction added successfully!', 'success');
        }
        
        function editTransaction(id) {
            const transaction = transactions.find(t => t.id === id);
            if (!transaction) return;
            
            // Fill the edit form
            document.getElementById('edit-id').value = transaction.id;
            document.getElementById('edit-name').value = transaction.name;
            document.getElementById('edit-amount').value = transaction.amount;
            document.getElementById('edit-type').value = transaction.type;
            document.getElementById('edit-category').value = transaction.category;
            document.getElementById('edit-date').value = transaction.date;
            document.getElementById('edit-notes').value = transaction.notes || '';
            
            // Show modal
            showModal('edit-modal');
        }
        
        function saveEditedTransaction(e) {
            e.preventDefault();
            
            const id = document.getElementById('edit-id').value;
            const name = document.getElementById('edit-name').value;
            const amount = parseFloat(document.getElementById('edit-amount').value);
            const type = document.getElementById('edit-type').value;
            const category = document.getElementById('edit-category').value;
            const date = document.getElementById('edit-date').value;
            const notes = document.getElementById('edit-notes').value;
            
            const index = transactions.findIndex(t => t.id === id);
            if (index !== -1) {
                transactions[index] = {
                    ...transactions[index],
                    name,
                    amount,
                    type,
                    category,
                    date,
                    notes,
                    modified: new Date().toISOString()
                };
                
                saveTransactions();
                hideModal('edit-modal');
                
                // Update UI
                displayTransactions();
                updateBalanceSummary();
                updateBudgetDisplay();
                
                // Show success message
                showNotification('Transaction updated successfully!', 'success');
            }
        }
        
        function confirmDeleteTransaction(id) {
            currentTransactionIdToDelete = id;
            showModal('delete-modal');
        }
        
        function deleteTransaction() {
            if (currentTransactionIdToDelete) {
                transactions = transactions.filter(t => t.id !== currentTransactionIdToDelete);
                saveTransactions();
                hideModal('delete-modal');
                
                // Update UI
                displayTransactions();
                updateBalanceSummary();
                updateBudgetDisplay();
                
                // Show success message
                showNotification('Transaction deleted successfully!', 'success');
                
                currentTransactionIdToDelete = null;
            }
        }
        
        function displayTransactions() {
            const transactionList = document.getElementById('transaction-list');
            const noTransactionsEl = document.getElementById('no-transactions');
            const searchText = document.getElementById('search-transactions').value.toLowerCase();
            const filterType = document.getElementById('filter-type').value;
            const filterCategory = document.getElementById('filter-category').value;
            const filterDate = document.getElementById('filter-date').value;
            
            // Filter transactions
            let filteredTransactions = transactions.filter(transaction => {
                // Search filter
                const matchesSearch = transaction.name.toLowerCase().includes(searchText) || 
                                     (transaction.notes && transaction.notes.toLowerCase().includes(searchText));
                
                // Type filter
                const matchesType = filterType === 'all' || transaction.type === filterType;
                
                // Category filter
                const matchesCategory = filterCategory === 'all' || transaction.category === filterCategory;
                
                // Date filter
                let matchesDate = true;
                if (filterDate !== 'all') {
                    const transDate = new Date(transaction.date);
                    const today = new Date();
                    
                    if (filterDate === 'today') {
                        matchesDate = isSameDay(transDate, today);
                    } else if (filterDate === 'week') {
                        matchesDate = isInCurrentWeek(transDate);
                    } else if (filterDate === 'month') {
                        matchesDate = isInCurrentMonth(transDate);
                    } else if (filterDate === 'year') {
                        matchesDate = isInCurrentYear(transDate);
                    }
                }
                
                return matchesSearch && matchesType && matchesCategory && matchesDate;
            });
            
            // Clear previous transactions
            transactionList.innerHTML = '';
            
            // Check if there are any transactions
            if (filteredTransactions.length === 0) {
                noTransactionsEl.style.display = 'block';
                return;
            } else {
                noTransactionsEl.style.display = 'none';
            }
            
            // Display each transaction
            filteredTransactions.forEach(transaction => {
                const transactionEl = document.createElement('li');
                transactionEl.classList.add('transaction-item');
                
                const currencySymbol = currencySymbols[settings.currency] || '$';
                const formattedAmount = formatCurrency(transaction.amount, settings.currency);
                
                transactionEl.innerHTML = `
                    <div class="transaction-details">
                        <div>${transaction.name}</div>
                        <div class="transaction-category">${categoryIcons[transaction.category] || '📌'} ${getCategoryName(transaction.category)}</div>
                        <div class="transaction-date">${formatDate(transaction.date)}</div>
                    </div>
                    <div class="transaction-amount ${transaction.type === 'income' ? 'income-text' : 'expense-text'}">
                        ${transaction.type === 'income' ? '+' : '-'} ${formattedAmount}
                    </div>
                    <div class="transaction-actions">
                        <button class="edit-btn" title="Edit">✏️</button>
                        <button class="delete-btn" title="Delete">🗑️</button>
                    </div>
                `;
                
                // Add event listeners
                transactionEl.querySelector('.edit-btn').addEventListener('click', () => {
                    editTransaction(transaction.id);
                });
                
                transactionEl.querySelector('.delete-btn').addEventListener('click', () => {
                    confirmDeleteTransaction(transaction.id);
                });
                
                transactionList.appendChild(transactionEl);
            });
        }
        
        function updateBalanceSummary() {
            const totalBalance = document.getElementById('total-balance');
            const totalIncome = document.getElementById('total-income');
            const totalExpense = document.getElementById('total-expense');
            
            const currencySymbol = currencySymbols[settings.currency] || '$';
            
            // Calculate totals
            const income = transactions
                .filter(t => t.type === 'income')
                .reduce((sum, transaction) => sum + transaction.amount, 0);
                
            const expense = transactions
                .filter(t => t.type === 'expense')
                .reduce((sum, transaction) => sum + transaction.amount, 0);
                
            const balance = income - expense;
            
            // Update UI
            totalIncome.textContent = formatCurrency(income, settings.currency);
            totalExpense.textContent = formatCurrency(expense, settings.currency);
            totalBalance.textContent = formatCurrency(balance, settings.currency);
            
            // Change color of balance based on value
            if (balance < 0) {
                totalBalance.classList.add('expense-text');
                totalBalance.classList.remove('income-text');
            } else if (balance > 0) {
                totalBalance.classList.add('income-text');
                totalBalance.classList.remove('expense-text');
            } else {
                totalBalance.classList.remove('income-text', 'expense-text');
            }
        }
        
        function updateCharts() {
            const chartType = document.getElementById('chart-type').value;
            const chartPeriod = document.getElementById('chart-period').value;
            const chartCanvas = document.getElementById('expense-chart');
            const categoryStats = document.getElementById('category-stats');
            
            // Filter transactions by period
            let filteredTransactions = filterTransactionsByPeriod(transactions, chartPeriod);
            
            // Get expense transactions only for category chart
            const expenseTransactions = filteredTransactions.filter(t => t.type === 'expense');
            
            // Prepare data for charts
            const categories = {};
            expenseTransactions.forEach(transaction => {
                if (categories[transaction.category]) {
                    categories[transaction.category] += transaction.amount;
                } else {
                    categories[transaction.category] = transaction.amount;
                }
            });
            
            // Prepare chart data
            const labels = Object.keys(categories).map(cat => getCategoryName(cat));
            const data = Object.values(categories);
            const backgroundColors = Object.keys(categories).map(cat => getCategoryColor(cat));
            
            // Destroy previous chart if exists
            if (chart) {
                chart.destroy();
            }
            
            // Create new chart
            if (chartType === 'pie') {
                chart = new Chart(chartCanvas, {
                    type: 'pie',
                    data: {
                        labels: labels,
                        datasets: [{
                            data: data,
                            backgroundColor: backgroundColors,
                            borderWidth: 1
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            legend: {
                                position: 'right'
                            }
                        }
                    }
                });
            } else if (chartType === 'bar') {
                chart = new Chart(chartCanvas, {
                    type: 'bar',
                    data: {
                        labels: labels,
                        datasets: [{
                            label: 'Expenses',
                            data: data,
                            backgroundColor: backgroundColors,
                            borderWidth: 1
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            legend: {
                                display: false
                            }
                        },
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            } else if (chartType === 'line') {
                // For line chart, group by date
                const dateGroups = {};
                
                filteredTransactions.forEach(transaction => {
                    const date = transaction.date;
                    if (!dateGroups[date]) {
                        dateGroups[date] = { income: 0, expense: 0 };
                    }
                    
                    if (transaction.type === 'income') {
                        dateGroups[date].income += transaction.amount;
                    } else {
                        dateGroups[date].expense += transaction.amount;
                    }
                });
                
                // Sort dates
                const sortedDates = Object.keys(dateGroups).sort((a, b) => new Date(a) - new Date(b));
                
                chart = new Chart(chartCanvas, {
                    type: 'line',
                    data: {
                        labels: sortedDates.map(date => formatDate(date)),
                        datasets: [
                            {
                                label: 'Income',
                                data: sortedDates.map(date => dateGroups[date].income),
                                borderColor: 'rgb(46, 204, 113)',
                                backgroundColor: 'rgba(46, 204, 113, 0.1)',
                                tension: 0.1,
                                fill: true
                            },
                            {
                                label: 'Expenses',
                                data: sortedDates.map(date => dateGroups[date].expense),
                                borderColor: 'rgb(231, 76, 60)',
                                backgroundColor: 'rgba(231, 76, 60, 0.1)',
                                tension: 0.1,
                                fill: true
                            }
                        ]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            }
            
            // Update category stats
            categoryStats.innerHTML = '';
            
            Object.keys(categories).forEach(category => {
                const amount = categories[category];
                const totalExpenses = expenseTransactions.reduce((sum, t) => sum + t.amount, 0);
                const percentage = totalExpenses > 0 ? ((amount / totalExpenses) * 100).toFixed(1) : 0;
                
                const categoryEl = document.createElement('div');
                categoryEl.classList.add('category-item');
                categoryEl.innerHTML = `
                    <div class="category-name">${categoryIcons[category] || '📌'} ${getCategoryName(category)}</div>
                    <div class="category-amount">${formatCurrency(amount, settings.currency)} (${percentage}%)</div>
                `;
                
                categoryStats.appendChild(categoryEl);
            });
        }
        
        function updateBudgetDisplay() {
            const monthlyBudget = settings.budget || 0;
            document.getElementById('monthly-budget').value = monthlyBudget;
            document.getElementById('budget-amount').textContent = `Budget: ${formatCurrency(monthlyBudget, settings.currency)}`;
            
            // Calculate current month's expenses
            const currentMonthExpenses = transactions
                .filter(t => t.type === 'expense' && isInCurrentMonth(new Date(t.date)))
                .reduce((sum, t) => sum + t.amount, 0);
            
            document.getElementById('spent-amount').textContent = `${formatCurrency(currentMonthExpenses, settings.currency)} spent`;
            
            // Update progress bar
            const progressBar = document.getElementById('budget-progress');
            if (monthlyBudget > 0) {
                const percentage = Math.min((currentMonthExpenses / monthlyBudget) * 100, 100);
                progressBar.style.width = `${percentage}%`;
                
                // Change color based on percentage
                if (percentage >= 90) {
                    progressBar.style.backgroundColor = 'var(--red)';
                } else if (percentage >= 70) {
                    progressBar.style.backgroundColor = 'orange';
                } else {
                    progressBar.style.backgroundColor = 'var(--green)';
                }
            } else {
                progressBar.style.width = '0';
            }
            
            // Update category budgets
            updateCategoryBudgets(monthlyBudget);
        }
        
        function updateCategoryBudgets(totalBudget) {
            const categoryBudgetsEl = document.getElementById('category-budgets');
            categoryBudgetsEl.innerHTML = '';
            
            if (!totalBudget || totalBudget <= 0) {
                categoryBudgetsEl.innerHTML = `
                    <div style="text-align: center; padding: 20px; color: #777;">
                        <p>Set a monthly budget to enable category budgeting</p>
                    </div>
                `;
                return;
            }
            
            // Get all expense categories
            const categories = {};
            transactions
                .filter(t => t.type === 'expense' && isInCurrentMonth(new Date(t.date)))
                .forEach(t => {
                    if (categories[t.category]) {
                        categories[t.category] += t.amount;
                    } else {
                        categories[t.category] = t.amount;
                    }
                });
            
            // Calculate suggested budgets based on spending patterns
            const totalExpenses = Object.values(categories).reduce((sum, amount) => sum + amount, 0);
            
            // Create category budget items
            Object.keys(categories).forEach(category => {
                const amount = categories[category];
                const percentage = totalExpenses > 0 ? (amount / totalExpenses) * 100 : 0;
                const suggestedBudget = totalBudget * (percentage / 100);
                
                const categoryBudgetEl = document.createElement('div');
                categoryBudgetEl.classList.add('form-group');
                categoryBudgetEl.innerHTML = `
                    <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 5px;">
                        <label>${categoryIcons[category] || '📌'} ${getCategoryName(category)}</label>
                        <span>${formatCurrency(amount, settings.currency)} spent</span>
                    </div>
                    <div style="background-color: #f1f2f6; border-radius: 5px; height: 12px; position: relative;">
                        <div style="height: 100%; background-color: ${getCategoryColor(category)}; width: ${percentage}%; border-radius: 5px;"></div>
                    </div>
                    <div style="display: flex; justify-content: space-between; font-size: 12px; margin-top: 2px;">
                        <span>Suggested budget: ${formatCurrency(suggestedBudget, settings.currency)}</span>
                        <span>${percentage.toFixed(1)}% of total</span>
                    </div>
                `;
                
                categoryBudgetsEl.appendChild(categoryBudgetEl);
            });
        }
        
        function saveBudget() {
            const budgetInput = document.getElementById('monthly-budget');
            const budget = parseFloat(budgetInput.value) || 0;
            
            settings.budget = budget;
            saveSettings();
            updateBudgetDisplay();
            
            showNotification('Budget saved successfully!', 'success');
        }
        
        function toggleTheme(e) {
            const isDarkMode = e.target.checked;
            
            if (isDarkMode) {
                document.documentElement.style.setProperty('--light', '#2d3436');
                document.documentElement.style.setProperty('--dark', '#f5f6fa');
                document.body.style.backgroundColor = '#1e272e';
            } else {
                document.documentElement.style.setProperty('--light', '#f5f6fa');
                document.documentElement.style.setProperty('--dark', '#2d3436');
                document.body.style.backgroundColor = '#f8f9fa';
            }
            
            settings.theme = isDarkMode ? 'dark' : 'light';
            saveSettings();
        }
        
        function exportData() {
            const dataToExport = {
                transactions: transactions,
                settings: settings
            };
            
            const dataStr = JSON.stringify(dataToExport, null, 2);
            const dataBlob = new Blob([dataStr], { type: 'application/json' });
            const downloadLink = document.createElement('a');
            
            downloadLink.href = URL.createObjectURL(dataBlob);
            downloadLink.download = `expense-tracker-data-${new Date().toISOString().split('T')[0]}.json`;
            document.body.appendChild(downloadLink);
            downloadLink.click();
            document.body.removeChild(downloadLink);
            
            showNotification('Data exported successfully!', 'success');
        }
        
        function importData() {
            const fileInput = document.getElementById('import-file');
            const file = fileInput.files[0];
            
            if (!file) {
                showNotification('Please select a file to import', 'error');
                return;
            }
            
            const reader = new FileReader();
            reader.onload = function(e) {
                try {
                    const importedData = JSON.parse(e.target.result);
                    
                    if (importedData.transactions && importedData.settings) {
                        transactions = importedData.transactions;
                        settings = importedData.settings;
                        
                        saveTransactions();
                        saveSettings();
                        
                        // Update UI
                        loadSettings();
                        displayTransactions();
                        updateBalanceSummary();
                        updateBudgetDisplay();
                        
                        hideModal('import-modal');
                        fileInput.value = '';
                        
                        showNotification('Data imported successfully!', 'success');
                    } else {
                        showNotification('Invalid data format', 'error');
                    }
                } catch (error) {
                    showNotification('Error importing data', 'error');
                    console.error('Import error:', error);
                }
            };
            
            reader.readAsText(file);
        }
        
        function clearAllData() {
            transactions = [];
            settings = {
                currency: 'USD',
                theme: 'light',
                budget: 0
            };
            
            saveTransactions();
            saveSettings();
            loadSettings();
            
            displayTransactions();
            updateBalanceSummary();
            updateBudgetDisplay();
            
            hideModal('clear-modal');
            showNotification('All data has been cleared', 'success');
        }
        
        // Utility Functions
        function generateID() {
            return Math.random().toString(36).substr(2, 9) + '_' + new Date().getTime();
        }
        
        function formatCurrency(amount, currency = 'USD') {
            const symbol = currencySymbols[currency] || '$';
            return `${symbol}${amount.toFixed(2)}`;
        }
        
        function formatDate(dateString) {
            const date = new Date(dateString);
            return date.toLocaleDateString(undefined, { year: 'numeric', month: 'short', day: 'numeric' });
        }
        
        function saveTransactions() {
            localStorage.setItem('transactions', JSON.stringify(transactions));
        }
        
        function saveSettings() {
            localStorage.setItem('settings', JSON.stringify(settings));
        }
        
        function loadSettings() {
            document.getElementById('currency-select').value = settings.currency;
            document.getElementById('theme-toggle').checked = settings.theme === 'dark';
            
            // Apply theme
            if (settings.theme === 'dark') {
                document.documentElement.style.setProperty('--light', '#2d3436');
                document.documentElement.style.setProperty('--dark', '#f5f6fa');
                document.body.style.backgroundColor = '#1e272e';
            }
        }
        
        function showModal(modalId) {
            document.getElementById(modalId).style.display = 'flex';
        }
        
        function hideModal(modalId) {
            document.getElementById(modalId).style.display = 'none';
        }
        
        function showNotification(message, type = 'info') {
            // Create notification element
            const notification = document.createElement('div');
            notification.className = `notification ${type}`;
            notification.innerHTML = message;
            notification.style.position = 'fixed';
            notification.style.bottom = '20px';
            notification.style.right = '20px';
            notification.style.padding = '12px 24px';
            notification.style.borderRadius = '4px';
            notification.style.color = 'white';
            notification.style.zIndex = '1000';
            notification.style.boxShadow = '0 3px 10px rgba(0,0,0,0.2)';
            
            // Set background color based on type
            if (type === 'success') {
                notification.style.backgroundColor = '#2ecc71';
            } else if (type === 'error') {
                notification.style.backgroundColor = '#e74c3c';
            } else {
                notification.style.backgroundColor = '#3498db';
            }
            
            document.body.appendChild(notification);
            
            // Remove after 3 seconds
            setTimeout(() => {
                notification.style.opacity = '0';
                notification.style.transition = 'opacity 0.5s';
                setTimeout(() => {
                    notification.remove();
                }, 500);
            }, 3000);
        }
        
        function getCategoryName(category) {
            const categoryNames = {
                'food': 'Food & Dining',
                'transportation': 'Transportation',
                'housing': 'Housing & Utilities',
                'entertainment': 'Entertainment',
                'shopping': 'Shopping',
                'health': 'Health & Medical',
                'travel': 'Travel',
                'education': 'Education',
                'personal': 'Personal Care',
                'bills': 'Bills & Payments',
                'salary': 'Salary',
                'gifts': 'Gifts/Rewards',
                'investments': 'Investments',
                'other': 'Other'
            };
            
            return categoryNames[category] || 'Unknown';
        }
        
        function getCategoryColor(category) {
            const categoryColors = {
                'food': '#e67e22',
                'transportation': '#3498db',
                'housing': '#9b59b6',
                'entertainment': '#f1c40f',
                'shopping': '#1abc9c',
                'health': '#e74c3c',
                'travel': '#2ecc71',
                'education': '#34495e',
                'personal': '#f39c12',
                'bills': '#c0392b',
                'salary': '#27ae60',
                'gifts': '#d35400',
                'investments': '#2980b9',
                'other': '#7f8c8d'
            };
            
            return categoryColors[category] || '#7f8c8d';
        }
        
        function isSameDay(date1, date2) {
            return date1.getDate() === date2.getDate() &&
                   date1.getMonth() === date2.getMonth() &&
                   date1.getFullYear() === date2.getFullYear();
        }
        
        function isInCurrentWeek(date) {
            const now = new Date();
            const startOfWeek = new Date(now);
            startOfWeek.setDate(now.getDate() - now.getDay());
            startOfWeek.setHours(0, 0, 0, 0);
            
            const endOfWeek = new Date(startOfWeek);
            endOfWeek.setDate(startOfWeek.getDate() + 6);
            endOfWeek.setHours(23, 59, 59, 999);
            
            return date >= startOfWeek && date <= endOfWeek;
        }
        
        function isInCurrentMonth(date) {
            const now = new Date();
            return date.getMonth() === now.getMonth() && 
                   date.getFullYear() === now.getFullYear();
        }
        
        function isInCurrentYear(date) {
            return date.getFullYear() === new Date().getFullYear();
        }
        
        function filterTransactionsByPeriod(transactions, period) {
            return transactions.filter(transaction => {
                const transDate = new Date(transaction.date);
                
                if (period === 'week') {
                    return isInCurrentWeek(transDate);
                } else if (period === 'month') {
                    return isInCurrentMonth(transDate);
                } else if (period === 'year') {
                    return isInCurrentYear(transDate);
                }
                
                // 'all' period
                return true;
            });
        }
    </script>
</body>
</html>
